+*In[6]:*+
[source, ipython3]
----
#roll number ending with odd questions

#Question 1 Count pairs of elements with sum equal to 10.


def count_pairs(arr,sum):
    count=0
    n=len(arr)
    
    #Two loops used to find if the corresponding sum is equal to 10
    
    for i in range(n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum: 
                count += 1

    return count

#Main function

arr=[2, 7, 4, 1, 3, 6] #pre-defined array in questions
sum=10 #pre-defined sum

print("The number of elements whose count pairs are ",count_pairs(arr,sum))
----


+*Out[6]:*+
----
The number of elements whose count pairs are  2
----


+*In[25]:*+
[source, ipython3]
----
'''Question 2 takes a list of real numbers as input and returns the range 
(difference between minimum and maximum) 
of the list. Check for list being less than 3 elements in which 
case return an error message (Ex: “Range determination not possible”).'''

def find_range(numbers):
    if len(numbers) < 3:
        #Less than 3 condition
        return "Range determination not possible"
    #To find the max and min of numbers
    return max(numbers) - min(numbers)


#Main Function
    # Example list of numbers
numbers = [5, 3, 8, 1, 0, 4]
    
    # Find the range of the list
result = find_range(numbers)
    
    # Print the result
print("The range of the list is:", result)


----


+*Out[25]:*+
----
The range of the list is: 8
----


+*In[27]:*+
[source, ipython3]
----
""" Question 3 Write a program that accepts a square matrix A and a positive integer m as arguments and
returns Am."""

import numpy as np

def matrix_power(A, m):
    # Ensure the input matrix is a numpy array
    A = np.array(A)
    
    # Check if the matrix is square or not
    if A.shape[0] != A.shape[1]:
        return "The matrix must be square."

    # Calculate A^m using numpy's matrix power function
    result = np.linalg.matrix_power(A, m)
    
    return result

def main():
    # User defined input
    n = int(input("Enter the size of the matrix (n x n): "))

    A = []

    # Get matrix values from user
    print("Enter the elements of the matrix row by row:")
    for i in range(n):
        #to read the values by removing whitespace
        row = list(map(int, input().split()))
        A.append(row)

    # Get the power m from user
    m = int(input("Enter the power m: "))

    # Calculate A^m
    result = matrix_power(A, m)
    
    # Print the result
    print("The result of A^m is:")
    print(result)

# Call the main function
main()

----


+*Out[27]:*+
----
Enter the size of the matrix (n x n): 2
Enter the elements of the matrix row by row:
1 2
3 4
Enter the power m: 4
The result of A^m is:
[[199 290]
 [435 634]]
----


+*In[29]:*+
[source, ipython3]
----
"""Question 4 Write a program to count the highest occurring character & its occurrence count in an input
string. Consider only alphabets."""
def getMaxOccurringChar(s):
    # Create a dictionary to store frequency of each character
    mp = {}
    
    # Length of string
    n = len(s)
    
    # For answer
    ans = ''
    
    # To check the count of the answer character is less or greater than another element's count
    cnt = 0
    
    # Traverse the string
    for i in range(n):
        # Push element into dictionary and increase its frequency
        if s[i] in mp:
            mp[s[i]] += 1
        else:
            mp[s[i]] = 1
        
        # Update answer and count
        if cnt < mp[s[i]]:
            ans = s[i]
            cnt = mp[s[i]]
    
    return ans, cnt

# Example usage
s = "hippopotamus"
char, count = getMaxOccurringChar(s)
print(f"Max occurring character is: '{char}' with count {count}")

----


+*Out[29]:*+
----
Max occurring character is: 'p' with count 3
----
